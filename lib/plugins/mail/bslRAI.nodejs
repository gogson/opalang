var rai = require("rai");
//var nodemailer = require("nodemailer");

var debug = false

/** @externType RAIServer.raiserver */
/** @externType RAIServer.raiclient */
/** @opaType RAIServer.options */
/** @opaType RAIServer.raicredentials */
/** @opaType RAIServer.server_callback */
/** @opaType RAIServer.client_callback */
/** @opaType V8.Error */
/** @externType binary */

/** @module RAIServer */

  /** @register {int -> opa[RAIServer.raiserver]}
   */
  function make_server(port) {
    var server = new rai.RAIServer();
    server.listen(port);
    return server;
  }

  /** @register {int, string, opa[RAIServer.options] -> opa[RAIServer.raiserver]}
   */
  function make_server_options(port, hostname, options) {
    if (options.key != undefined && options.key != "" && options.cert != undefined && options.cert != "") {
      credentials = {key:options.key, cert:options.cert};
    } else
      credentials = undefined;
    options = { debug:options.debug,
                disconnectOnTimeout:options.disconnectOnTimeout,
                secureConnection:options.secureConnection,
                credentials:credentials,
                timeout:options.timeout };
    var server = new rai.RAIServer(options);
    server.listen(port, hostname);
    return server;
  }

  /** @register {opa[RAIServer.raiserver], \
                 (opa[RAIServer.raiserver], opa[RAIServer.server_callback], continuation(opa[void]) -> void), \
                 continuation(opa[void]) -> void}
   *  @cpsBypass
   */
  function server_callback(server, callback, k) {
    server.on("connect", function (client) { callback(server, {connect:client}, ccont(k, function(){})); });
    server.on("error", function (err) {
                err = err || {name:"", message:"", stack:""};
                callback(server, {error:err}, ccont(k, function(){}));
              });
    return_(k, js_void);
    return;
  }

  /** @register {opa[RAIServer.raiserver] -> void}
   */
  function server_remove_listeners(server) {
    server.removeAllListeners("connect");
    server.removeAllListeners("error");
  }

  /** @register {opa[RAIServer.raiserver], \
                 (opa[void], continuation(opa[void]) -> void), \
                 continuation(opa[void]) -> void}
   *  @cpsBypass
   */
  function close_server(server, on_end, k) {
    server.end(function () { on_end({}, ccont(k, function(){})); });
    return_(k, js_void);
    return;
  }

  /** @register {opa[RAIServer.raiclient], string -> void}
   */
  function send(client, msg) {
    client.send(msg);
    return;
  }

  /** @register {opa[RAIServer.raiclient] -> bool}
   */
  function secureConnection(client) {
    return (client.secureConnection) ? true : false;
  }

  /** @register {opa[RAIServer.raiserver], opa[RAIServer.raiclient], \
                 (opa[RAIServer.raiserver], opa[RAIServer.raiclient], opa[RAIServer.client_callback], continuation(opa[void]) -> void), \
                 continuation(opa[void]) -> void}
   *  @cpsBypass
   */
  function client_callback(server, client, callback, k) {
    client.on("command", function (command, payload) {
                callback(server, client, {command:command, payload:payload.toString("binary")}, ccont(k, function(){}));
    });
    client.on("data", function (data) {
                callback(server, client, {data:{contents:data, length:data.length}}, ccont(k, function(){}));
              });
    client.on("error", function (err) {
                err = err || {name:"", message:"", stack:""};
                callback(server, client, {error:err}, ccont(k, function(){}));
              });
    client.on("timeout", function () { callback(server, client, {timeout:{}}, ccont(k, function(){})); });
    client.on("ready", function () { callback(server, client, {ready:{}}, ccont(k, function(){})); });
    client.on("tls", function () { callback(server, client, {tls:{}}, ccont(k, function(){})); });
    return_(k, js_void);
    return;
  }

  /** @register {opa[RAIServer.raiclient] -> void}
   */
  function client_remove_listeners(client) {
    client.removeAllListeners("command");
    client.removeAllListeners("data");
    client.removeAllListeners("error");
    client.removeAllListeners("timeout");
    client.removeAllListeners("ready");
    client.removeAllListeners("tls");
  }

  /** @register {opa[RAIServer.raiclient] -> void}
   */
  function client_start_data(client) {
    client.startDataMode();
    return;
  }

  /** @register {opa[RAIServer.raiclient] -> void}
   */
  function client_start_tls(client) {
    client.startTLS();
    return;
  }

  /** @register {opa[RAIServer.raiclient], opa[RAIServer.raicredentials] -> void}
   */
  function client_start_tls_credentials(client, credentials) {
    // TODO: ca array
    client.startTLS(credentials);
    return;
  }

  /** @register {opa[RAIServer.raiclient], string -> void}
   */
  function client_start_data_sequence(client, endSequence) {
    if (endSequence == undefined || endSequence == "") endSequence = ".";
    client.startDataMode(endSequence);
    return;
  }

  /** @register {opa[RAIServer.raiclient] -> void}
   */
  function client_end(client) {
    client.end();
    return;
  }

/** @endModule */

